<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gitlab-CI自动化运行机器学习scikit-learn</title>
      <link href="/2019/06/03/dai-ma-guan-li/gitlab/gitlab-ci-zi-dong-hua-yun-xing-ji-qi-xue-xi-scikit-learn/"/>
      <url>/2019/06/03/dai-ma-guan-li/gitlab/gitlab-ci-zi-dong-hua-yun-xing-ji-qi-xue-xi-scikit-learn/</url>
      
        <content type="html"><![CDATA[<p>在Gitlab代码托管和自动化CI部分中使用docker能完成c++代码的编译运行，当我运行</p><pre><code>python ****.py</code></pre><p>总是提示我没有安装numpy模块，其实我是安装的了。<br>使用</p><pre><code>sudo gitlab-runner run --help</code></pre><p>  <img src="/.io//gitlab-runner-help.png" alt="Alt text"></p><p>发现gitlab-runner的编译log可以添加到系统的log</p><pre><code>cat /var/log/syslog</code></pre><p>  <img src="/.io//gitlab-syslog.png" alt="Alt text"></p><p>可惜没什么用，突然想到在选择executor</p><pre><code>sudo gitlab-runner register</code></pre><p>  <img src="/.io//register.png" alt="Alt text"></p><p>  可以选择shell。<br>  当我再次运行下面命令时,就可以运行了。</p><pre><code>  sudo gitlab-runner run</code></pre><p>  <img src="/.io//gitlab-python.png" alt="Alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> Gitlab </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab代码托管和自动化CI</title>
      <link href="/2019/06/03/dai-ma-guan-li/gitlab/gitlab-dai-ma-tuo-guan-he-zi-dong-hua-ci/"/>
      <url>/2019/06/03/dai-ma-guan-li/gitlab/gitlab-dai-ma-tuo-guan-he-zi-dong-hua-ci/</url>
      
        <content type="html"><![CDATA[<p><strong><em>Gitlab的安装</em></strong></p><p>使用清华源配置Gitlab</p><pre><code>https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</code></pre><p>  <img src="/.io//gitlab-tuna.png" alt="Alt text"></p><p>因为gitlab需要配置邮件提醒，所以需要提前配置163邮箱的stmp</p><p>  <img src="/.io//stmp.png" alt="Alt text"></p><p>修改配置文件</p><pre><code>sudo vim /etc/gitlab/gitlab.rb</code></pre><p>修改的具体内容如下</p><p>  <img src="/.io//gitlab.png" alt="Alt text"></p><p>  gitlab[‘smtp_password’]为自己设置的stmp密码（不是163邮箱的密码）</p><p>  <img src="/.io//gitlab-mail.png" alt="Alt text"></p><p>注意：user[‘git_user_email’] 要和gitlab[‘smtp_user_name’]一致</p><p>  <img src="/.io//gitlab-mail-user.png" alt="Alt text"></p><p>配置完成之后，启动gitlab</p><pre><code>sudo gitlab-ctl configure</code></pre><p>配置成功后出现的界面（至于logo部分，可以自行修改）</p><p>  <img src="/.io//gitlab-login.png" alt="Alt text"></p><p><strong><em>配置CI</em></strong></p><p>同样使用清华的源，先安装docker，安装时如果出错，请停止gitlab。如果没有错误提示，按照清华源提示操作。</p><pre><code>sudo gitlab-ctl stop</code></pre><p>  <img src="/.io//docker.png" alt="Alt text"></p><p>同样使用清华的源，安装gitlab-ci-multi-runner</p><p>  <img src="/.io//ci.png" alt="Alt text"></p><p>新建一个项目，推到gitlab</p><p>然后配置 .gitlab-ci.yml</p><p>  <img src="/.io//ci-test.png" alt="Alt text"></p><p>注册runner</p><p>记住url和token<br>  <img src="/.io//runner.png" alt="Alt text"></p><pre><code>  sudo gitlab-runner register</code></pre><p>  <img src="/.io//register.png" alt="Alt text"></p><p>开启gitlab-runner</p><pre><code>```sudo gitlab-runner run```</code></pre><p>成功的结果<br>  <img src="/.io//success.png" alt="Alt text"></p><p>gitlab-ci配置文件教程</p><pre><code>http://docs.gitlab.com/ce/ci/yaml/README.html#cache</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> Gitlab </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载网易yum源</title>
      <link href="/2016/10/07/pa-chong/2016-10-7-xia-zai-wang-yi-yum-yuan/"/>
      <url>/2016/10/07/pa-chong/2016-10-7-xia-zai-wang-yi-yum-yuan/</url>
      
        <content type="html"><![CDATA[<p>最近在搭建opensatck环境，由于所有的部署为离线的状态，所以决定自己搭建一个yum源服务器<br>网上也有一下关于reposync和createrepo的用法，我在使用reposync时很多包出现下载失败，于是自己就写了一个脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib2<span class="token keyword">import</span> bs4<span class="token keyword">import</span> sys<span class="token keyword">import</span> socketreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span><span class="token string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#获取网页源代码</span><span class="token keyword">def</span> <span class="token function">get_Html</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#打开页面</span>        <span class="token comment" spellcheck="true">#设置使用代理</span>        socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>None<span class="token punctuation">,</span>header<span class="token punctuation">)</span>        response <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>        Code <span class="token operator">=</span>  response<span class="token punctuation">.</span>code        <span class="token keyword">if</span> Code<span class="token operator">!=</span><span class="token number">200</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#响应码不是200</span>            <span class="token keyword">print</span> url  <span class="token operator">+</span><span class="token string">"error"</span>        the_page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>  the_page    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"页面打开出错"</span>        <span class="token keyword">print</span> Exception <span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>e<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://mirrors.163.com/centos/7/cloud/x86_64/openstack-kilo/common/"</span>    html <span class="token operator">=</span> get_Html<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    bs <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    url_tag <span class="token operator">=</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    number <span class="token operator">=</span> len<span class="token punctuation">(</span>url_tag<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> url_tag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> name <span class="token operator">+</span> <span class="token string">"下载中.."</span>        request_url <span class="token operator">=</span> url<span class="token operator">+</span>name        data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request_url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./common/"</span><span class="token operator">+</span>name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> data<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># filter out keep-alive new chunks</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                    f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>需要的同学，可以直接修改url和需要下载的文件目录即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凸优化理论</title>
      <link href="/2016/03/20/ji-qi-xue-xi/tu-you-hua/2016-3-20-tu-you-hua-li-lun/"/>
      <url>/2016/03/20/ji-qi-xue-xi/tu-you-hua/2016-3-20-tu-you-hua-li-lun/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p>我们一般处理优化问题的时候（在得到这个数学表达形式的时候，可能需要一些变换）都希望将问题转换为凸优化问题，为什么转化为凸优化问题就能使问题变得简化呢？因为凸优化问题有一个特别好的特点：问题的局部解，一定是问题的最优解。</p><p>其实我一直想写一篇关于凸优化的blog，只不过每次想写的时候总觉得还欠点推论。（我不是数学专业的学生，反复的看数学相关的paper，反复的改，争取没有误解书中的理论。如果看完之后没有看懂，可以邮件给我回复。）</p><p>下面开始带你走进凸优化的世界。</p><div class="side-by-side">    <div class="toleft">        <img class="image" src="/.io//liner.png" alt="Alt Text">    </div>    <div class="toright">        一般的直线形式为 $$ min f(x_1,x_2)=x_1^2+x_2^2 $$    </div></div><ul><li><p>1.最优化问题</p><ul><li><p>1.1无约束问题</p><p>例如：  $$ min f(x_1,x_2)=x_1^2+x_2^2 $$</p><p>$$ min f(x_1,x_2)=x_1^2+x_2^2 $$</p><ul><li><p>1.1.1无约束问题的整体解</p><p>设 $$ x^* $$ 为全局最优解(以极小点为例)</p><p>$$ f(x^<em>) &lt; f(x)\quad  \forall x\neq x^</em> $$</p></li><li><p>1.1.2无约束问题的局部解</p><p>设 $$ x^*\in\Re^n $$ 为局部解或局部最优解(以极小点为例)</p><p>存在 $$ \varepsilon&gt;0 $$ 使得 $$ |x-x^*|&lt; \varepsilon $$</p><p>总有</p><p>$$ f(x^<em>)\leq f(x)\quad  \forall x\neq x^</em> $$</p></li></ul></li><li><p>1.2约束问题</p><ul><li><p>1.2.1等式约束问题</p><p>例如：    $$ min \quad  f(x)\s\cdot t\quad c_i(x)=0,i=1,2\cdots p $$</p><p>p：为p个等式限制条件</p></li><li><p>1.2.2不等式约束问题</p><p>例如：    $$ min  \quad f(x)\s\cdot t\quad c_i(x)\leq0,i=1,2\cdots p $$</p></li><li><p>1.2.3一般约束问题</p><p>$$ min \quad f(x)\s\cdot t\quad c_i(x)\leq0,i=1,2\cdots p\ ;;;;;\quad c_i(x)=0,i=p,p+1\cdots p+q $$</p></li><li><p>1.2.4约束问题的整体解</p><p>设 $$ x^*\in D \quad D为可行域 $$ 为全局最优解(以极小点为例)都有</p><p>$$ f(x)\geq f(x^*) $$</p><p>当 $$ x\neq x^* $$</p><p>$$ f(x) &gt; f(x^*) $$</p></li><li><p>1.2.4约束问题的局部解</p><p>设 $$ x^*\in D $$ 为局部解或局部最优解</p><p>存在 $$ \varepsilon&gt;0 $$ 使得当</p><p>$$ x\in D \quad 且\quad|x-x^*|&lt; \varepsilon $$</p><p>$$ f(x) &gt; f(x^*) $$</p></li></ul></li></ul></li></ul><p>到这个地方已经清楚了约束问题和无约束问题的形式和含义，但是目标函数和约束函数可以是任意的连续函数，对于这样的问题是很复杂的，而一类特殊的优化问题---凸优化问题就是SVM的核心</p><ul><li><p>2凸最优化</p><ul><li><p>2.1凸函数</p><p>$$ x_1,x_2\in S, \lambda \in(0,1) $$</p><p>$$ f(\lambda x_1+(1-\lambda)x_2)\leq \lambda f(x_1)+(1-\lambda)f(x_2) $$</p></li></ul></li></ul><ul><li><p>2.2 凸约束问题</p><p>如果 $$ f(x) $$ 和 约束函数都为凸函数则问题为凸约束问题</p><p>$$ min \quad f(x)\s\cdot t\quad c_i(x)\leq0,i=1,2\cdots p\ ;;;;;\quad c_i(x)=0,i=p,p+1\cdots p+q $$</p><p>设D为问题的可行域 则：</p><ul><li>若问题有局部解 $$ x^* $$ ，则 $$ x^* $$ 是问题的整体解</li><li>问题的整体解组成的集合是凸集</li><li>若问题优局部解 $$ x^* $$ , $$ f(x) $$ 是D上的严格凸函数，则 $$ x^* $$ 是问题的唯一整体解</li></ul><p>证明过程如下：</p><p><img src="/.io//svm_1.png" alt="Alt text"><br><img src="/.io//svm_2.png" alt="Alt text"></p></li></ul><p>1.凸函数（SVM函数九是一个凸函数）</p><p>1.满足kkt条件的二次约束规划所得到的局部最优解一定是全局最优解</p><p>2.全局最优解一定满足kkt条件</p><p><strong><em>SVM基础</em></strong></p><p>$$ margin=(d_+)+(d_-) $$</p><p>$$ Goal:Max{margin} $$</p><p>$$ d_+=\frac{|1-0|}{|w|}=\frac1{|w|} $$ ;   $$ d_-=\frac{|0-(-1)|}{|w|}=\frac1{|w|} $$</p><p>$$ margin=d=\frac2{|w||} $$</p><p>$$ Goal=Max(\frac2{|w|}) $$</p><p>$$ {w^Tx_i+b\geq1 \quad ;;; if;y_i=+1\w^Tx_i+b\leq-1 \quad if;y_i=-1} $$</p><p>$$ y_i(w^Tx_i+b)\geq1\quad \forall i=1,2\cdots n $$</p><p>$$ margin=(d_+)+(d_-)=\frac2{|w|}=\frac2{\sqrt{w^Tw}} $$</p><p>$$ Max\rightarrow\frac2{\sqrt{w^Tw}} $$</p><p>$$ Min\rightarrow \frac12w^Tw $$</p><p>多一个 $$\frac12$$ 方便处理，这时问题转换为</p><p>$$ Min \quad \phi(w)=\frac12w^Tw\s \cdot t\quad y_i(w^Tx_i+b)\geq1\quad \forall i=1,2\cdots n $$</p><p>进一步处理为了后面的 lagrange multiplier 方便</p><p>$$ y_i(w^Tx_i+b)\geq1\quad \forall i=1,2\cdots n \quad 这个式子成立，对它做个变形\ \Rightarrow 1-y_i(w^Tx_i+b)\leq0\quad \forall i=1,2\cdots n $$</p><p>so 我们添加一个系数 $$ \alpha_i\geq0 $$ 使</p><p>$$ \alpha_i（1-y_i(w^Tx_i+b)\geq0\quad \forall i=1,2\cdots n $$</p><p>所以现在问题变为了</p><p>$$ L(w,b,\alpha)=\frac12w^Tw+\alpha_i[y_i(w^Tx_i+b)-1]\<br>\quad=\frac12w^Tw+\alpha_1[1-y_1(w^Tx_1+b)]+\alpha_2[1-y_2(w^Tx_2+b)]+\cdots+\alpha_n[1-y_n(w^Tx_n+b)]\<br>\quad=\frac12w^Tw-\alpha_1[y_1(w^Tx_1+b)-1]-\alpha_2[y_2(w^Tx_2+b)-1]-\cdots\alpha_n[1-y_n(w^Tx_1+b)]\<br>\quad=\frac12w^Tw-\sum_{i=1}^n\alpha_i[y_i(w^Tx_i+b)-1] $$</p><p>$$ \frac{\partial L(w,b,\alpha)}{} $$</p><p>$$ \nabla $$</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 凸优化 </tag>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统安装HDFS时配置网络联通</title>
      <link href="/2016/03/10/hadoop/2016-3-10-ubuntu-xi-tong-an-zhuang-hdfs-shi-pei-zhi-wang-luo-lian-tong/"/>
      <url>/2016/03/10/hadoop/2016-3-10-ubuntu-xi-tong-an-zhuang-hdfs-shi-pei-zhi-wang-luo-lian-tong/</url>
      
        <content type="html"><![CDATA[<p><strong>配置本地环境</strong></p><p> ps:本机8G内存(可以模拟3台虚拟机&lt;总6G&gt;+本地2G)</p><p>  1.主机采用伪分布,用于测试所写的MR程序,然后将所编译的jar包通过scp上传到HDFS集群．这样就可以DeBug MR</p><p>  由于我启动了HBase，所以在jvm中会有HBase的进程</p><p>  <img src="/.io//1460644826484.png" alt="Alt text"><br> ２.安装3台虚拟机</p><p>  2.1)虚拟机网络问题:<br>  VBox可以使用多网卡,所以可以装2个网卡,一个用于和本地主机公用Net网络,另一个用于虚拟机内部的3台互联.</p><p>  <strong>安装一个slave节点,其他的节点可以通过复制虚拟机实现.</strong></p><p>2.2)网卡配置<br>  <img src="/.io//1460645878161.png" alt="Alt text"></p><p>  ![Alt text](./png/2016-04-14 22:58:32屏幕截图.png)</p><p>手动为master和slave的桥接网卡分配ip</p><p>例如:</p><pre class=" language-cmd"><code class="language-cmd">master :ip 192.168.1.1 掩码255.255.255.0 网关192.168.1.0slave  :ip 192.168.1.2 掩码255.255.255.0 网关192.168.1.0</code></pre><p>  手动测试在 master 上 <code>ping 192.168.1.2</code> 有反馈,则为ip搞定</p><p>  2.3)其他配置</p><p>  1.开放主机22000端口</p><p><code>sudo ufw allow 22000</code></p><p>  2.虚拟机做端口映射</p><pre class=" language-java"><code class="language-java"><span class="token number">22000</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">22</span> <span class="token comment" spellcheck="true">//(ssh scp 默认22 端口)</span><span class="token number">22001</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">50020</span><span class="token number">22002</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">9000</span></code></pre><p>2.4)scp向虚拟机传输文件</p><pre class=" language-python"><code class="language-python">scp <span class="token operator">-</span>P <span class="token number">22000</span> 文件路径 hadoop@localhost<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">#大写P_小写不行</span></code></pre><p>  这时可以将jdk包和hadoop包通过scp传到虚拟机内部现在4台电脑你自己可以通过自定义端口来实现互相联通</p><p>  其实做共享文件夹也可以</p><pre class=" language-cmd"><code class="language-cmd">sudo mount -t vboxsf 共享文件夹名称   /mnt/</code></pre><p>  要想自动挂载的话，可以在<code>/etc/fstab</code>中添加一项<br>  共享文件夹名称</p><pre class=" language-cmd"><code class="language-cmd">/mnt/ vboxsf rw,gid=100,uid=1000,auto 0 0`</code></pre><p>剩下的任务就需要配置jdk和hadoop了,可以去官网上查看配置信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
